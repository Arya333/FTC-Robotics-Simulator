
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.InputMismatchException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Anantula_927978
 */
public class MainWindow extends javax.swing.JFrame {
    
    private TreeMap<Integer, Team> teams;
    private TreeSet<Match> matches;
    private TreeMap<Integer, Double> opr; 
    private TreeSet<Team> rankedTeams;
    private TreeMap<Integer, Double> oprFromTable;
    private File currentFile;
    private ArrayList<Simulation> simulations;
    private TreeSet<RankedTeam> rankedTeams2;
    
    
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        
        teams = new TreeMap<>();
        matches = new TreeSet<>();
        opr = new TreeMap<>();
        rankedTeams = new TreeSet<>();
        oprFromTable = new TreeMap<>();
        simulations = new ArrayList<>();
        rankedTeams2 = new TreeSet<>();
        
        initComponents();
        
        // Autosize the column widths
        table_matches.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table_teams.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table_simulator.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table_ranked.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
             
        try {
            loadFullData(new Scanner(new File("1819AML_results_m3.csv")));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: file not found!", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            loadOPR(new Scanner(new File("TeamOPR.txt")));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: file not found!", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Fills table automatically when run 
        ActionEvent evt = new ActionEvent(new Object(), 0, "");
        displayTeamsInTable();
        displayMatchesInTable();
        DefaultTableModel model = (DefaultTableModel) table_simulator.getModel();
        model.setRowCount(0);
        Object[] data = new Object[9];
        for (Integer key : teams.keySet()){
            data[1] = teams.get(key).getNumber();
            data[2] = opr.get(teams.get(key).getNumber());
            
            model.addRow(data);
        }
        
        try {
            loadMatches(new Scanner(new File("MatchList.txt")));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: file not found!", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        tabbedPane = new javax.swing.JTabbedPane();
        panel_teams = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_teams = new DisplayTable();
        panel_matches = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_matches = new DisplayTable();
        button_generateMatches = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        panel_simulator = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_simulator = new DisplayTable();
        button_scoreMatches = new javax.swing.JButton();
        spinner_numSimulations = new javax.swing.JSpinner();
        spinner_viewSimulation = new javax.swing.JSpinner();
        label_Simulations = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_ranked = new javax.swing.JTable();
        button_rankTeams = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menuItem_open = new javax.swing.JCheckBoxMenuItem();
        menuItem_fullData = new javax.swing.JCheckBoxMenuItem();
        menuItem_importMatchesFromFile = new javax.swing.JCheckBoxMenuItem();
        menuItem_importOPRFromFile = new javax.swing.JCheckBoxMenuItem();
        menuItem_save = new javax.swing.JCheckBoxMenuItem();
        menuItem_saveAs = new javax.swing.JCheckBoxMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_teams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Team Number", "Team Name", "OPR", "Average Score from Historical Matches", "Historical Match Scores"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table_teams);

        javax.swing.GroupLayout panel_teamsLayout = new javax.swing.GroupLayout(panel_teams);
        panel_teams.setLayout(panel_teamsLayout);
        panel_teamsLayout.setHorizontalGroup(
            panel_teamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_teamsLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 510, Short.MAX_VALUE))
        );
        panel_teamsLayout.setVerticalGroup(
            panel_teamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Teams", panel_teams);

        table_matches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Red Score", "Red Alliance", "Blue Score", "Blue Alliance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_matches);

        button_generateMatches.setText("Generate Matches from MatchMaker");
        button_generateMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_generateMatchesActionPerformed(evt);
            }
        });

        jButton2.setText("Click Here");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_matchesLayout = new javax.swing.GroupLayout(panel_matches);
        panel_matches.setLayout(panel_matchesLayout);
        panel_matchesLayout.setHorizontalGroup(
            panel_matchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_matchesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panel_matchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_matchesLayout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(button_generateMatches))
                    .addGroup(panel_matchesLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jButton2)))
                .addGap(0, 344, Short.MAX_VALUE))
        );
        panel_matchesLayout.setVerticalGroup(
            panel_matchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
            .addGroup(panel_matchesLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(button_generateMatches)
                .addGap(128, 128, 128)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Matches", panel_matches);

        table_simulator.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Rank", "Team Number", "OPR", "TBP", "RP", "Average Score of Simulated Matches", "Standard Deviation of Simulated Scores", "High Score", "Simulated Scores"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(table_simulator);

        button_scoreMatches.setText("Score Matches");
        button_scoreMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_scoreMatchesActionPerformed(evt);
            }
        });

        spinner_numSimulations.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(0), null, Integer.valueOf(1)));

        spinner_viewSimulation.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinner_viewSimulation.setFocusable(false);
        spinner_viewSimulation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_viewSimulationStateChanged(evt);
            }
        });

        label_Simulations.setText("Choose which simulation you want to see");

        table_ranked.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Rank", "Team Number", "Total RP", "Total TBP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(table_ranked);

        button_rankTeams.setText("Rank Teams");
        button_rankTeams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_rankTeamsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_simulatorLayout = new javax.swing.GroupLayout(panel_simulator);
        panel_simulator.setLayout(panel_simulatorLayout);
        panel_simulatorLayout.setHorizontalGroup(
            panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_simulatorLayout.createSequentialGroup()
                .addGroup(panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_simulatorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(button_scoreMatches, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinner_numSimulations))
                        .addGap(202, 202, 202)
                        .addGroup(panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label_Simulations)
                            .addComponent(spinner_viewSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_rankTeams)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        panel_simulatorLayout.setVerticalGroup(
            panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_simulatorLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinner_viewSimulation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner_numSimulations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_simulatorLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_rankTeams))
                    .addGroup(panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_simulatorLayout.createSequentialGroup()
                            .addGap(28, 28, 28)
                            .addComponent(button_scoreMatches))
                        .addGroup(panel_simulatorLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(label_Simulations, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_simulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)))
        );

        tabbedPane.addTab("Simulator", panel_simulator);

        menu_file.setText("File");

        menuItem_open.setSelected(true);
        menuItem_open.setText("Open");
        menuItem_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_openActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_open);

        menuItem_fullData.setSelected(true);
        menuItem_fullData.setText("Import Full Data");
        menuItem_fullData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_fullDataActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_fullData);

        menuItem_importMatchesFromFile.setSelected(true);
        menuItem_importMatchesFromFile.setText("Import Matches from File");
        menuItem_importMatchesFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_importMatchesFromFileActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_importMatchesFromFile);

        menuItem_importOPRFromFile.setSelected(true);
        menuItem_importOPRFromFile.setText("Import OPR from File");
        menuItem_importOPRFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_importOPRFromFileActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_importOPRFromFile);

        menuItem_save.setSelected(true);
        menuItem_save.setText("Save");
        menuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_save);

        menuItem_saveAs.setSelected(true);
        menuItem_saveAs.setText("Save As");
        menuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveAsActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_saveAs);

        menuBar.add(menu_file);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItem_fullDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_fullDataActionPerformed
        
        
        System.out.println("Begin Full Team Import...");
        
        try {
            
            File file;
            JFileChooser jfc = new JFileChooser();
            
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                file = jfc.getSelectedFile();
            } else {
                return;
            }
            
            Scanner data = new Scanner(file);
            loadFullData(data);
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: file not found!", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
        }
        
        //updateTeamStatsTable();
        
    }//GEN-LAST:event_menuItem_fullDataActionPerformed

    private void menuItem_importMatchesFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_importMatchesFromFileActionPerformed
        // TODO add your handling code here:
        
        
        try{
            
            File file;
            JFileChooser jfc = new JFileChooser();
            
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                file = jfc.getSelectedFile();
            } else {
                return;
            }
            
            Scanner data = new Scanner(file);
            loadMatches(data);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: file not found!", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
        }
        
        displayMatchesInTable();
    }//GEN-LAST:event_menuItem_importMatchesFromFileActionPerformed

    private void menuItem_importOPRFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_importOPRFromFileActionPerformed

        try {
            
            File file;
            JFileChooser jfc = new JFileChooser();
            
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                file = jfc.getSelectedFile();
            } else {
                return;
            }
            
            Scanner data = new Scanner(file);
            loadOPR(data);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: file not found!", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
        }
        
        //displayOPR();
    }//GEN-LAST:event_menuItem_importOPRFromFileActionPerformed

    private void button_scoreMatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_scoreMatchesActionPerformed
        // Calls all methods necassary to score matches
        int numSimulations = (int)spinner_numSimulations.getValue();   
        DefaultTableModel model = (DefaultTableModel) table_simulator.getModel();
        for (int i = 0; i < numSimulations; i++){
            try {
           
                String command = "MatchMaker -g -a 2 -l teams.txt -u 3 -t 49 -r 5 -s";
                Process process = Runtime.getRuntime().exec(command);
                Scanner data = new Scanner(process.getInputStream());
                loadMatches(data);
                
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR: IOException!", "IOException Error", JOptionPane.ERROR_MESSAGE);
            }
            scoreMatches();
            simulations.add(new Simulation(rankedTeams, matches));
            displayTeamsInTable();
            displaySimulatorInTable();
            System.out.println(model.getValueAt(0, 1));
        }
    }//GEN-LAST:event_button_scoreMatchesActionPerformed

    private void button_generateMatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_generateMatchesActionPerformed
            // Generate matches by calling the MatchMaker.exe program from Idol Loop Software
            // Code will capture the output, then place data in the Matches set
            // and update the table_matches       
        try {
           
            String command = "MatchMaker -g -a 2 -l teams.txt -u 3 -t 49 -r 5 -s";
            Process process = Runtime.getRuntime().exec(command);
            Scanner data = new Scanner(process.getInputStream());
            loadMatches(data);
            
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: IOException!", "IOException Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_button_generateMatchesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "ERROR: you clicked!", "Click Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void menuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveAsActionPerformed
        
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            
            File file = jfc.getSelectedFile();
            writeModelToFile(file);
            
        }
    }//GEN-LAST:event_menuItem_saveAsActionPerformed

    private void menuItem_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_openActionPerformed
        try {
            
            JFileChooser jfc = new JFileChooser();
            
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                // TODO add your handling code here:
                File file = jfc.getSelectedFile();
                FileInputStream fis = new FileInputStream(file);
                ObjectInputStream ois = new ObjectInputStream(fis);
                SimModel model = (SimModel) ois.readObject();

                // Reads the data from the model and replaces data in the program
                teams = model.getTeams();
                matches = model.getMatches();
                opr = model.getOpr();
                rankedTeams = model.getRankedTeams();
                simulations = model.getSimulations();
                rankedTeams2 = model.getRankedTeams2();

                displayMatchesInTable();
                displayTeamsInTable();
                displaySimulatorInTable();
                
                currentFile = file;
                
                ois.close();
                
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: file not found!", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: IOException!", "IOException Error", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Class Not Found Error!", "Class Not Found Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_openActionPerformed

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveActionPerformed
              
        if (currentFile == null) {
                
            menuItem_saveAsActionPerformed(evt);
                
        } else {
            writeModelToFile(currentFile);
        }
                                    
    }//GEN-LAST:event_menuItem_saveActionPerformed

    private void spinner_viewSimulationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinner_viewSimulationStateChanged
        DefaultTableModel model = (DefaultTableModel) table_simulator.getModel();
        if ((Integer)spinner_viewSimulation.getModel().getValue() == 0) return; 
        else {
            int index = (Integer)spinner_viewSimulation.getModel().getValue() - 1;
            if (index < simulations.size()){
                Simulation sim = simulations.get(index);
                rankedTeams = sim.getRankedTeams();
                matches = sim.getMatches();
                displaySimulatorInTable();
                displayMatchesInTable();
                System.out.println(index);
            }
        }
        
    }//GEN-LAST:event_spinner_viewSimulationStateChanged

    private void button_rankTeamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_rankTeamsActionPerformed
        addTotalsToTeams();
        displayRankedInTable();
        rankedTeams2.clear();
    }//GEN-LAST:event_button_rankTeamsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_generateMatches;
    private javax.swing.JButton button_rankTeams;
    private javax.swing.JButton button_scoreMatches;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel label_Simulations;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JCheckBoxMenuItem menuItem_fullData;
    private javax.swing.JCheckBoxMenuItem menuItem_importMatchesFromFile;
    private javax.swing.JCheckBoxMenuItem menuItem_importOPRFromFile;
    private javax.swing.JCheckBoxMenuItem menuItem_open;
    private javax.swing.JCheckBoxMenuItem menuItem_save;
    private javax.swing.JCheckBoxMenuItem menuItem_saveAs;
    private javax.swing.JMenu menu_file;
    private javax.swing.JPanel panel_matches;
    private javax.swing.JPanel panel_simulator;
    private javax.swing.JPanel panel_teams;
    private javax.swing.JSpinner spinner_numSimulations;
    private javax.swing.JSpinner spinner_viewSimulation;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table_matches;
    private javax.swing.JTable table_ranked;
    private javax.swing.JTable table_simulator;
    private javax.swing.JTable table_teams;
    // End of variables declaration//GEN-END:variables

    private void addScoreToTeam(int number, String name, int score) {
        //Method will check to see if the team exists in the teams TreeMap.
        //If team exists, gets the scores TreeSet, and adds score to the set.
        //If team does not exist, creates a new team with number & name, then
        //adds the score to the scores TreeSet.
        
        Team team;
        
        if (teams.containsKey(number)){
            team = teams.get(number);
        } else {
            team = new Team(name, number, new ArrayList<Integer>());
        }
        
        team.getScores().add(score);
        
        teams.put(number, team);
    }

    private void updateTeamStatsTable() {
        // Refreshes the Team Stats table with data from the teams TreeMap
        // Call this method anytime the team data changes to reflect the changes
        // in the table
        
        for (Integer key : teams.keySet()){
            System.out.println(teams.get(key));
        }
    }
    
    private void displayMatchesInTable(){
    	//loops through the matches and outputs all of the matches as recorded from the excel sheet
        DefaultTableModel model = (DefaultTableModel) table_matches.getModel();
        model.setRowCount(0);
        
        for (Match m : matches){
            Object[] data = new Object[5];
            
            // Add asterik for surrogate teams
            String red1 = (m.getSurrogates()[0]) ? "* " + m.getRed1() : "" + m.getRed1();
            String red2 = (m.getSurrogates()[1]) ? "* " + m.getRed2() : "" + m.getRed2();
            String blue1 = (m.getSurrogates()[2]) ? "* " + m.getBlue1() : "" + m.getBlue1();
            String blue2 = (m.getSurrogates()[3]) ? "* " + m.getBlue2() : "" + m.getBlue2();
            
            String redAlliance = String.format("%7s%4s%7s", red1, "", red2);
            String blueAlliance = String.format("%7s%4s%7s", blue1, "", blue2);
            
            // adds teams data for each row
            data[0] = m.getName();
            data[1] = m.getRedScore();
            data[2] = redAlliance;
            data[3] = m.getBlueScore();
            data[4] = blueAlliance;
            
            model.addRow(data);
        }
    }
    
    private void displayTeamsInTable(){
        // loops through teams and outputs team data from excel sheet
        DefaultTableModel model = (DefaultTableModel) table_teams.getModel();
        model.setRowCount(0);
        
        for (Integer key : teams.keySet()){
            Object[] data = new Object[5];
            
            // adds team stats and data for each row
            data[0] = key;
            data[1] = teams.get(key).getName();
            data[2] = opr.get(key);
            data[3] = ScoreMaker.getAverage(teams.get(key).getScores());
            data[4] = teams.get(key).getScores();
            
            model.addRow(data);
        }
    }
    
    private void displaySimulatorInTable(){
        
        DefaultTableModel model = (DefaultTableModel) table_simulator.getModel();
        model.setRowCount(0);
        
        int rank = 1;
        
        for (Team team : rankedTeams){
            Object[] data = new Object[9];
            
            data[0] = rank;
            rank++;
            data[1] = team.getNumber();
            data[2] = oprFromTable.get(team.getNumber());
            data[3] = team.getTbp();
            data[4] = team.getRp();
            data[5] = ScoreMaker.getAverage(team.getScores_simulated());
            data[6] = ScoreMaker.getSTD(team.getScores_simulated());
            data[7] = Collections.max(team.getScores_simulated());
            data[8] = team.getScores_simulated();
            
            model.addRow(data);
        }
        
    }
    
    
    private void displayOPR(){
        // loops through the opr treemap and prints the team num and team opr
        for (Integer key : opr.keySet()){
            System.out.println("Team " + key + " OPR - " + opr.get(key));
        }
    }

    private void scoreMatches() {
        /* iterates through the matches TreeSet and scores each individual match. To do this, uses the ScoreMaker
        class to get a score for red1, red2, blue1, blue2. Then, adds red1 and red2 to set the redScore, and add 
        blue1 and blue2 to set the bluescore. 
        Determine which team wins the match
        Add the losers score to the tbp instance variable of all 4 team in the match.
        Add points to the rp instance variable based on the following criteria
            Win - add 2 pts
            Tie - add 1 pt
            Loss - add 0 pts
            Does not add any points for rp or tbp for a surrogate team
        After all matches are scored, iterates through the teams TreeMap and adds
        all the teams to the rankedTeams TreeSet<Team>.
        */
        clearAllData();
        rankedTeams = new TreeSet<>();
       
        for (Match match : matches){
            
            Team red1 = teams.get(match.getRed1());
            Team red2 = teams.get(match.getRed2());
            Team blue1 = teams.get(match.getBlue1());
            Team blue2 = teams.get(match.getBlue2());
            
            int red1Score = scoreTeam(red1);
            int red2Score = scoreTeam(red2);
            int blue1Score = scoreTeam(blue1);
            int blue2Score = scoreTeam(blue2);
            
            if (red1Score < 0) red1Score = 0;
            if (red2Score < 0) red2Score = 0;
            if (blue1Score < 0) blue1Score = 0;
            if (blue2Score < 0) blue2Score = 0;
            
            int redScore = red1Score + red2Score;
            int blueScore = blue1Score + blue2Score;
            
            match.setRedScore(redScore);
            match.setBlueScore(blueScore);
            
            boolean[] surrogates = match.getSurrogates();
            
            if (!surrogates[0]){
                if (redScore > blueScore){
                    red1.setRp(red1.getRp() + 2);
                    red1.setTbp(red1.getTbp() + blueScore);
                }
                else if (blueScore > redScore){
                    red1.setRp(red1.getRp() + 0);
                    red1.setTbp(red1.getTbp() + redScore);
                }
                else{
                    red1.setRp(red1.getRp() + 1);
                    red1.setTbp(red1.getTbp() + redScore);
                }
            }
            if (!surrogates[1]){
                if (redScore > blueScore){
                    red2.setRp(red2.getRp() + 2);
                    red2.setTbp(red2.getTbp() + blueScore);
                }
                else if (blueScore > redScore){
                    red2.setRp(red2.getRp() + 0);
                    red2.setTbp(red2.getTbp() + redScore);
                }
                else{
                    red2.setRp(red2.getRp() + 1);
                    red2.setTbp(red2.getTbp() + redScore);
                }
            }
            if (!surrogates[2]){
                if (redScore > blueScore){
                    blue1.setRp(blue1.getRp() + 0);
                    blue1.setTbp(blue1.getTbp() + blueScore);
                }
                else if (blueScore > redScore){
                    blue1.setRp(blue1.getRp() + 2);
                    blue1.setTbp(blue1.getTbp() + redScore);
                }
                else{
                    blue1.setRp(blue1.getRp() + 1);
                    blue1.setTbp(blue1.getTbp() + blueScore);
                }
            }
            if (!surrogates[3]){
                if (redScore > blueScore){
                    blue2.setRp(blue2.getRp() + 0);
                    blue2.setTbp(blue2.getTbp() + blueScore);
                }
                else if (blueScore > redScore){
                    blue2.setRp(blue2.getRp() + 2);
                    blue2.setTbp(blue2.getTbp() + redScore);
                }
                else{
                    blue2.setRp(blue2.getRp() + 1);
                    blue2.setTbp(blue2.getTbp() + blueScore);
                }
            }
            int index = match.getName().indexOf(" ")+1;
            int matchNum = Integer.parseInt(match.getName().substring(index));
            red1.addMatchNum(matchNum);
            blue1.addMatchNum(matchNum);
            red2.addMatchNum(matchNum);
            blue2.addMatchNum(matchNum);
            
            
            red1.getScores_simulated().add(redScore);
            red2.getScores_simulated().add(redScore);
            blue1.getScores_simulated().add(blueScore);
            blue2.getScores_simulated().add(blueScore);
            
        }        
        addTeams(teams);
        displayMatchesInTable();
    }
    
    private int scoreTeam(Team team){
        // adds opr and std for input team and returns simulated score for team
        int teamNum = team.getNumber();
        for (int i = 0; i < table_simulator.getRowCount(); i++){
            Integer a = (Integer)(table_simulator.getValueAt(i, 1));
            Double b = (Double)(table_simulator.getValueAt(i,2));
            oprFromTable.put(a,b);
        }
        double oprTeam = oprFromTable.get(teamNum);
        //System.out.println(teamNum + " " + oprTeam);
        double std = ScoreMaker.getSTD(team.getScores());
        return ScoreMaker.getScore(oprTeam, std);
        
    }
    
    private void addTeams(TreeMap<Integer, Team> teams){
        // adds all teams into rankedTeams tree map with keys 
        for(Integer key : teams.keySet()){
            Team team = new Team();
            team.setRp(teams.get(key).getRp());
            team.setMatchNumbers(teams.get(key).getMatchNumbers());
            team.setName(teams.get(key).getName());
            team.setNumber(teams.get(key).getNumber());
            team.setScores(teams.get(key).getScores());
            team.setScores_simulated(teams.get(key).getScores_simulated());
            team.setTbp(teams.get(key).getTbp());
            rankedTeams.add(team);
        }
    }
    
    private void displayResultsInTable(){
        // displays team stats for every team in rankedTeams
        for (Team team : rankedTeams){
            System.out.println(team);
        }
    }

    private void loadMatches(Scanner data) {
        
        matches = new TreeSet();
        
        try{
            if (data.hasNext()){
                while (data.hasNext()){
                    //String line = data.nextLine();
                    //Scanner match = new Scanner(line);
                    //match.useDelimiter("\t");
                    String matchName = data.next();
                    int redOne = data.nextInt();
                    boolean redOneSurrogate = (data.nextInt() == 1);
                    int redTwo = data.nextInt();
                    boolean redTwoSurrogate = (data.nextInt() == 1);
                    int blueOne = data.nextInt();
                    boolean blueOneSurrogate = (data.nextInt() == 1);
                    int blueTwo = data.nextInt();
                    boolean blueTwoSurrogate = (data.nextInt() == 1);
                    boolean[] array = {redOneSurrogate, redTwoSurrogate, blueOneSurrogate, blueTwoSurrogate};

                    matches.add(new Match(matchName, redOne, redTwo, blueOne, blueTwo, array));
                }
            } else JOptionPane.showMessageDialog(this, "ERROR: Incompatible File Type!", "Incompatible File Type Error", JOptionPane.ERROR_MESSAGE);
        } catch (InputMismatchException ex){
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Input Mismatch Exception!", "Input Mismatch Error", JOptionPane.ERROR_MESSAGE);
        }
         displayMatchesInTable();
            
        
    }
    
    private void loadOPR(Scanner data){
        // Reads the OPR pairings from a file. The first item read is team number
        // second item is team OPR
        // key = teamNumber
        // value = opr
        opr = new TreeMap<>();
        // Scanner to loop through each line
        int teamNum = 0;
        double teamOPR = 0;
            // Goes through each line and gets ints and doubles
        try{
            if (data.hasNextLine()){
                while (data.hasNextLine()){
                    Scanner line = new Scanner(data.nextLine());
                    line.useDelimiter("\t"); // delimiter is a tab
                    teamNum = line.nextInt(); // team num is the int in the line
                    teamOPR = line.nextDouble(); // team opr is the double
                    opr.put(teamNum, teamOPR); 
                }
            } else JOptionPane.showMessageDialog(this, "ERROR: Incompatible File Type!", "Incompatible File Type Error", JOptionPane.ERROR_MESSAGE);
        } catch (InputMismatchException ex){
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Input Mismatch Exception!", "Input Mismatch Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadFullData(Scanner data){
        teams = new TreeMap<>();
        // Read full match data from AML meets 1 - 3. Each match line (row) contains
        // match info such as red & blue alliances, scores, and match stats.
        try{
            if (data.hasNextLine()){
                while (data.hasNextLine()){

                        Scanner line = new Scanner(data.nextLine());
                        line.useDelimiter(","); //data is separated by commas

                        line.next();  //Skips Meet Info
                        line.next();  //Skips Match Name
                        line.next();  //Skips League Name

                        //red and blue scores are recorded
                        int redScore = line.nextInt();
                        int blueScore = line.nextInt();

                        //numbers and names of teams are recorded
                        int red1Number = line.nextInt();
                        String red1Name = line.next();

                        int red2Number = line.nextInt();
                        String red2Name = line.next();

                        int blue1Number = line.nextInt();
                        String blue1Name = line.next();

                        int blue2Number = line.nextInt();
                        String blue2Name = line.next();

                        //scores are added into the team's scores TreeSet
                        addScoreToTeam(red1Number, red1Name, redScore);
                        addScoreToTeam(red2Number, red2Name, redScore);
                        addScoreToTeam(blue1Number, blue1Name, blueScore);
                        addScoreToTeam(blue2Number, blue2Name, blueScore);

                }
            }
            else JOptionPane.showMessageDialog(this, "ERROR: Incompatible File Type!", "Incompatible File Type Error", JOptionPane.ERROR_MESSAGE);
        } catch (InputMismatchException ex){
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: Input Mismatch Exception!", "Input Mismatch Error", JOptionPane.ERROR_MESSAGE);
        }
    

    }
    
    private void writeModelToFile(File file){
        
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(file);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(new SimModel(teams, matches, opr, rankedTeams, simulations, rankedTeams2));
            currentFile = file;
            oos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: file not found!", "File Not Found Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: IOException!", "IOException Error", JOptionPane.ERROR_MESSAGE);
        } 
    }
    
    private void clearAllData(){
        for (Integer key : teams.keySet()){
            teams.get(key).setRp(0);
            teams.get(key).setTbp(0);
            teams.get(key).setScores_simulated(new ArrayList<Integer>());
        }
    }

    private void addTotalsToTeams() {
        for (Team team : rankedTeams){
            int num = team.getNumber();
            double rp = 0;
            double tbp = 0;
            for (int i = 0; i < simulations.size(); i++){
                TreeSet<Team> rTeams = simulations.get(i).getRankedTeams();
                for (Team team2 : rTeams){
                    if (team2.getNumber() == num){
                        rp += team2.getRp();
                        tbp += team2.getTbp();
                    }
                }
            }
            rankedTeams2.add(new RankedTeam(num, rp, tbp));
        }
        for (RankedTeam team3 : rankedTeams2){
            System.out.println(team3.getNumber() + " " + team3.getTotalTBP() + " " + team3.getTotalRP());
        }
    }

    private void displayRankedInTable() {
        DefaultTableModel model = (DefaultTableModel) table_ranked.getModel();
        model.setRowCount(0);
        
        int rank = 1;
        
        for (RankedTeam team : rankedTeams2){
            Object[] data = new Object[4];
            
            data[0] = rank;
            rank++;
            data[1] = team.getNumber();
            data[2] = team.getTotalRP();
            data[3] = team.getTotalTBP();
       
            model.addRow(data);
        }
    }
}
